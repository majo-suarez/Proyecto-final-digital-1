//servos
//#include <EEPROM.h>

#include <Servo.h>

Servo servo1;
Servo servo2;
Servo servo3;
Servo servo4;
Servo servo5;

#define servoPin1 (1 << PB1) // PB1
#define servoPin2 (1 << PB2) // PB2
#define servoPin3 (1 << PB3) // PB3
#define servoPin4 (1 << PB4) // PB4
#define servoPin5 (1 << PB5) // PB5

int servo1Pos;
int servo2Pos;
int servo3Pos;
int servo4Pos;
int servo5Pos;

//int servo1EEPROMAddress = 0;
//int servo2EEPROMAddress = 1;
//int servo3EEPROMAddress = 2;
//int servo4EEPROMAddress = 3;
//int servo5EEPROMAddress = 4;

void setup() {
  Serial.begin(9600);
  servo1.attach(servoPin1);
  servo2.attach(servoPin2);
  servo3.attach(servoPin3);
  servo4.attach(servoPin4);
  servo5.attach(servoPin5);

  // Configurar pines de los servos como salidas
  DDRB |= (1 << servoPin1) | (1 << servoPin2) | (1 << servoPin3) | (1 << servoPin4) | (1 << servoPin5);

  // Configurar Timer 0 en modo CTC (Clear Timer on Compare Match)
  TCCR0A = (1 << WGM01);
  // Establecer el valor de comparación para obtener una frecuencia de interrupción de 100 Hz (10 ms)
  OCR0A = 77;
  // Habilitar la interrupción del Timer 0 en comparación con el valor del registro OCR0A
  TIMSK0 = (1 << OCIE0A);
  // Establecer la fuente de reloj del Timer 0 en F_CPU/1024
  TCCR0B = (1 << CS02) | (1 << CS00);
}

void loop() {
  // El código principal se ejecuta en la interrupción del Timer 0
}

ISR(TIMER0_COMPA_vect) {
  if (Serial.available() >= 5) {
    // Leer estados de los botones desde Arduino 1
    int buttonState1 = Serial.read();

    int buttonState2 = Serial.read();

    int buttonState3 = Serial.read();

    int buttonState4 = Serial.read();

    int buttonState5 = Serial.read();


    // Verificar los estados de los botones y mover los servos en consecuencia
    if (buttonState1 == HIGH) {
      // Se presiona el botón 1, mover el servo 1
      servo1Pos = 45; // Calcular la posición del servo para el botón 1
      servo1.write(servo1Pos);
      //writeEEPROM(servo1EEPROMAddress, servo1Pos);
    }

    if (buttonState2 == HIGH) {
      // Se presiona el botón 2, mover el servo 2
      servo2Pos = 50; // Calcular la posición del servo para el botón 2
      servo2.write(servo2Pos);
      //writeEEPROM(servo2EEPROMAddress, servo2Pos);
    }

    if (buttonState3 == HIGH) {
      // Se presiona el botón 3, mover el servo 3
      servo3Pos = 60; // Calcular la posición del servo para el botón 3
      servo3.write(servo3Pos);
      //writeEEPROM(servo3EEPROMAddress, servo3Pos);
    }

    if (buttonState4 == HIGH) {
      // Se presiona el botón 4, mover el servo 4
      servo4Pos = 70; // Calcular la posición del servo para el botón 4
      servo4.write(servo4Pos);
      //writeEEPROM(servo4EEPROMAddress, servo4Pos);
    }

    if (buttonState5 == HIGH) {
      // Se presiona el botón 5, mover el servo 5
      servo5Pos = 80; // Calcular la posición del servo para el botón 5
      servo5.write(servo5Pos);
      //writeEEPROM(servo5EEPROMAddress, servo5Pos);
    }
  }
}

/*void writeEEPROM(int address, int value) {
  // Escribir un byte en la dirección de EEPROM especificada
  EEPROM.update(address, value);
}*/
